// 1. Vari√°veis de Ambiente e Configura√ß√£o
import 'dotenv/config'

// 2. Importa a Aplica√ß√£o Express
import app from './app.js'

// 3. Importa o Banco de Dados e as Associa√ß√µes
// Importa a inst√¢ncia Sequelize como 'connection' (default export)
// e a fun√ß√£o 'connectDatabase' (named export) de src/config/connect.js
import connection, { connectDatabase } from './config/connect.js'
// import './models/associations' // Garante que as associa√ß√µes sejam carregadas

const PORT = process.env.PORT || 3000

/**
 * Fun√ß√£o principal ass√≠ncrona para inicializar a aplica√ß√£o
 */
async function initializeApp() {
  try {
    // 1. Conectar e testar o DB (usando sua fun√ß√£o de connect.js)
    // O console.log('Conectando...') j√° est√° dentro da fun√ß√£o connectDatabase,
    // mas mantive a chamada para clareza.
    await connectDatabase()
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso.')

    // 2. Sincronizar os Modelos com o DB
    if (process.env.NODE_ENV === 'development') {
      // Usa 'connection' que √© a inst√¢ncia Sequelize importada de connect.js
      await connection.sync({ force: false })
      console.log('‚úÖ Modelos e tabelas sincronizadas!')
    }

    // 3. Iniciar o servidor Express
    app.listen(PORT, () => {
      console.log(`üöÄ Servidor rodando em http://localhost:${PORT}`)
      console.log(`‚öôÔ∏è Ambiente: ${process.env.NODE_ENV || 'development'}`)
      // console.log(`üìÑ Docs: http://localhost:${PORT}/docs`)
    })
  } catch (error) {
    // O erro j√° est√° sendo tratado dentro de connectDatabase com process.exit(1),
    // mas √© bom ter esse bloco para outros erros de inicializa√ß√£o.
    console.error('‚ùå ERRO DURANTE A INICIALIZA√á√ÉO DA APLICA√á√ÉO:', error.message)
    process.exit(1)
  }
}

// Inicia a aplica√ß√£o
initializeApp()

// ‚¨áÔ∏è Tratamento de Erros de Baixo N√≠vel (Boas Pr√°ticas)

// Trata Exce√ß√µes S√≠ncronas N√£o Capturadas
process.on('uncaughtException', (err) => {
  console.error('‚ùå UNCAUGHT EXCEPTION! Encerrando...')
  console.error(err.name, err.message, err.stack)
  process.exit(1)
})

// Trata Rejei√ß√µes de Promises N√£o Capturadas
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå UNHANDLED REJECTION! Encerrando...')
  console.error('Raz√£o:', reason)
  console.error('Promise:', promise)
  process.exit(1)
})
